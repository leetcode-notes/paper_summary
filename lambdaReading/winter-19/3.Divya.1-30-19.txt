Gradual Program Verification 
by Johannes Balder, Jonathan Aldrich, and Eric Tanter


Summary: 
- They systematically derive a gradual verification system from a
  static one.
- The programmer can control the trade off between static and 
  dynamic checking by tuning the (im)precision of pre- and 
  postconditions. ---> WHERE DID THEY TALK ABOUT THIS???????
- It's for first-order imparative programs. They have a comparison
  to higher-order functional programs in related work.
- Supports a pay-as-you-go cost model.


Note:
- Prog verification techniques attempt to improve the correctness
  of programs, by exploiting pre- and postconditinos specified in 
  formulas drawn from  a given logic like Hoare logic.
- Hoare logic (also known as Floydâ€“Hoare logic or Hoare rules) is 
  a formal system with a set of logical rules for reasoning 
  rigorously about the correctness of computer programs.
- The central feature of Hoare logic is the Hoare triple. A triple 
  describes how the execution of a piece of code changes the state 
  of the computation. A Hoare triple is of the form
    {P}C{Q}
  where P and Q are assertions and C is a command. P is named the 
  precondition and Q the postcondition: when the precondition is 
  met, executing the command establishes the postcondition.  
- stat verification is not expressive enough although it verifies 
  the prog without running it.
- dyn verification is exponentially strong/expressive however it 
  checks everything in the runtime and adds overhead to run time.
  
Comments:
- Explaination of why static verification doesn't work for their ex?
  + for the second withdraw the only thing you know about balance is
    that it's greater than zero. however, you don't know that since
    you don't know that it's 70 because that's keeping track of the 
    state which you cannot do in static verification.
- They say that hybrid approaches do not support a smooth continuum 
  between static and dynamic verification. How is theirs a continuum
  b/w stat and dyn?

In-meeting comments:
- Eric:
  - gradualizing a system is similar to variationalizing it in some
    sense! 
  - how to make a system variational and does the world cares about it?
    (idea for paper, although it's not probably going to be easy)
    
  -   |--gradual typing--|--gradual verification(e.g. dep. type)--|
    Python------------Haskell---------------------------------Perfection
  
