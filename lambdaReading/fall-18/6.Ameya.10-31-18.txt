[Scopes as Types](https://hendrik.van-antwerpen.net/publications/AntwerpenBPRV18.pdf)

Summary:
They introduce a new domain specific meta-lang for the specification of 
static semantics, based on scope graphs and constraints with the goal 
to support high-level specification of type systems that can be used for
multiple purposes, like reasoning and implementing type checkers.

Notes:
- Nominal vs structural type system:
 - nominal: types are identified by name, i.e., compatibility and 
            equivalence of data types is determined by explicit 
            declarations and/or the name of the types. Eg.: C++, 
            C#, Java, Objective-C, Delphi, Swift, and Rust
 - structural: types are identified by structure, i.e., type 
               compatibility and equivalence are determined by the 
               type's actual structure or definition, and not by other 
               characteristics such as its name or place of declaration
               Eg.: OCaml, Haskell
- typing is deeply dependent on name resolution
- scope graph: a prog is reduced to a graph that represents its binding info

Comments:
- i was kind of nonchalant about the paper!
- Is type system specification just the inference rules of a type system?
- p17: eg of prematurely optimization for particular binding patterns?
- how do they validate proposals like this?



In-meeting comments:
- the scope graph formalism is very concrete and intuitive but it's not 
  very easy to illustrate type systems with it
- scope graphs are a uniform rep of type systems
- purpose: useful for tools that implement langs but it's not probably 
  appealing to PL researchers who know how to do it but it's good for 
  engineer folks that want to implement langs that work with different ...
- abstract binding trees : AST + binding --> it's probably too simplistic 
  and the scope graph is probabaly much more powerful
- lang workbench: making tools to make DSLs
- scope: non-continuous regions in a prog where the declaration of a var
  is visible. but scope here is just an abstraction, a node in a graph
- this rep solves the problem of wholes in the traditional scope 
- here scope is explicit but they need other things to make sense of the
  concreteness of scopes. you can point to a place and know the scope of
  it. if you want to reason about sth you have to make it explicit often 
  times.
