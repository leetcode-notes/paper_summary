On the Criteria To Be Used in Decomposing Systems into Modules
D.L. Parnas

Summary:
The paper discusses criteria used in modularization. The author considers
a module to be a responsibility assignment rather than a subprogram which 
just groups some functions together. The design decisions made before working
on each module individually is modularization and the criteria introduced
for modularization are supposed to reduce the development time (managerial), 
untie making changes to different modules (flexibility), and enable 
understanding the system one module at a time (comprehensibility). The paper
compares two modularization approach over a case study where the first relies
on the data flow in the system and the second relies on information hiding 
among modules. Any small change in the format, size, and data structure of the
data affects multiple modules of the first approach which isn't desirable. Hence,
the author proposes basing modularization on design decisions and trying to 
hide decisions from each other as a better development strategy of (specially) a
large system.

Notes:
- too much transfer of control bw modules hurts efficiency. eventhough we can
  use highly specialized and efficient transfers. This requires us to maintain 
  several representation of the program.
- good decomposition is different from hierarchical structure. we have a hierarchical
  structure if a certain relation may be defined bw the modules or programs and that 
  relation is a partial ordering. benefits of partial ordering: 1) parts of the 
  system are simplified bc they use the services of lower levels 2) we are able to cut
  off the upper levels and still have a usable and useful product. 

Comments:


-------------------------------------------------------------------
Class assignment:

Discussion notes:
Summary:
The paper discusses criteria used in modularization. The author considers
a module to be a responsibility assignment rather than a subprogram which 
just groups some functions together. The design decisions made before working
on each module individually is modularization and the criteria introduced
for modularization are supposed to reduce the development time (managerial), 
untie making changes to different modules (flexibility), and enable 
understanding the system one module at a time (comprehensibility). The paper
compares two modularization approach over a case study where the first relies
on the data flow in the system and the second relies on information hiding 
among modules. Any small change in the format, size, and data structure of the
data affects multiple modules of the first approach which isn't desirable. Hence,
the author proposes basing modularization on design decisions and trying to 
hide decisions from each other as a better development strategy of (specially) a
large system.

Take homes:
While modularizing a system think of information hiding among modules and not
the data flow in your system and try to reduce the dependency among modules.

Discussion questions/topics:
- What are implementation and checkout time? 
- Reling on information hiding requires us to maintain several representation of
  the program which is costly in terms of developer time. How do we find the 
  line between modularization and other resources like the developer time?
- What's a pure compiler?
- Decomposing a system along the classical lines of either a comiler or interpretor
  isn't preferred but what if we are implementing a language or a program generator?

Summary notes:
Summary:
The paper states two modularization (design decisions made for a system) approaches.
The first one (the conventional one) relies on the flowchart of the system, which is 
a sequence of steps taken to get the desire behaviour of the system. The other one (
the unconventional one) relies on information-hiding and data flow of the system. The
second one reduces the interdependency of modules noticeably while it may not be as
efficient as the first one in some cases.

Take home:
Information-hiding is a good criteria when deciding how to modularize a system.

Discussion highlights:
- Modularization has disadvantages as well as advantages. Some of these costs are:
  1) it's harder to optimise a modular system 2) it may reduces efficiency in some
  cases 3) debugging may be harder because we don't know much about other modules 
  and the underlying data structure they may be using. Some of the benefits are:
  1) it's more usable 2) it's more extensible 3) it takes less time to debug because
  modules are less dependent on each other and they only conduct one specific task
  4) it saves time because different groups can work on different modules without 
  requiring much knowledge of other modules and teams
- In industry (both PL implementations and other systems such as a OS) people take 
  different approaches towards modularity some of which result in more efficient 
  systems which are harder to extend and add new features. For example, gcc (C 
  compiler) isn't very modular but it's more efficient than its counterparts but
  at the same time it's really hard to add new features to the language and expect
  gcc to compile them. It's also hard to extend gcc to produce different architecture
  because of its lack of modularity.
- Basing modularity on flowchart is basically breaking down a problem to a sequence of
  steps and considering each step as a module, which is a common approach. However, it
  intertwins modules heavily which isn't desirable. On the other hand, relying on data
  flow and using intermediate data structure to pass from a module to another is more
  desirable in the sense that it hides implementation details of a module from others.
  So although modules are still getting their inputs from other modules and passing their
  outputs to other modules, they don't require to know about details and implementation 
  decisions made for other modules. In other words, information-hiding increases cohesion
  (i.e. puting things that conduct a task and are highly related to each other in one 
  module) and decreases coupling (i.e. dependency of modules to each other s.t. if one
  changes an implementation decision in a module they end up applying that change to 
  multiple other modules). These can be considered as metrics to measure modularity.


  
