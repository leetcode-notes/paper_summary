Modular Object-Oriented Programming with Units and Mixins,
R. B. Findler and M Flatt

Notes:
- a module delineates boundaries for separate developments.
- a class permits fine-grained reuse via selective inheritance and
  overriding.
- units: like Java packages except that units are linked through an 
  external linking specification instead of through a fixed internal
  specification.
- mixins: like java classes except that a mixin is parameterized over 
  its superclass, so it can be applied multiple times to create different
  derived classes from different base classes.
- specify connections bw modules or classes separately from their defs.
- a programmer can exploit the encapsulation and linking properties of
  units to control the application of mixin extensions.
- better reuse through defining basic definitions, the extensions, and 
  the client in separate modules. 
- each unit encapsulates its definitions and expressions wo evaluating 
  them unitl the unit is invoked.
- the units must first be linked together to form a prog.
- a module sys serves two key purposes:
  * separate development: a module encapsulates a set of definitions,
    clearly delineating the interface bw the module and the rest of the 
    prog. Each module can be developed in isolation and distributed to 
    clients in a ocmpiled form.
  * linking: modules are linked together to form a prog. linking connects
    the definitions in one module with those in another, but a module 
    cannot interfere with the internal structure of any other module.
- a class sys supports:
  * extensible types: an interface defines an extensible type, and a class
    implements such a type.
  * selective reuse: a class can selectively refine the iimpl of its superclass
    preserving some inherited defs and overriding others with its own defs.
  * instantiation: a class is instantiated to create an obj, a first-class value
    that encapsulates the methods and instance variables of the class.
- separate a modules's linking specification from its encapsualted definitions.
- separate a class's superclass specification from its extending defs.

--------------------------------------------------------------
In-calss assignment:

Summary notes:
Summary:
The paper discusses the interaction between modules (units) and 
classes (mixins) and how one can improve software reuse by considering
this interaction as well as separating this connection from their
definitions. They achieve this by first defining units and mixins with
explicit imports and exports (without compiling the code) and then 
linking them in the final program. In order to solve the extensibility
problem they keep all old original code and add new variants with 
extensions to it.

Take home(s):
- Modules and classes offer different advantages for code reuse and 
  considering both helps improve code reuse immensly which relies 
  heavily on separating the definition of them from their connections.

Questions/topics for discussion:
- What is a formal definition of a client? To me it seems that they 
  consider a piece of code client of another piece of code if it refers
  to it. Is that right?
- To me it seems that they keep the original code and just repeat it 
  according to the extensions made and call it the solution to the
  extensibility problem. Isn't this just having repeatitive similar
  code all over the place? Although, in their approach this repeteation 
  is only done for linking programs, which is probably much less 
  repeteation compared to other approaches.
- So they're approach works only for dynamically typed languages?
- How would one put the following lesson in terms of Haskell: "Separate a 
  module's linking specification from its encapsulated definitions."


Discussion notes:
Summary:
The paper proposes a language with built-in support for extensibility
in both dimensions by introducing units (similar to Java packages except
that they're linked externally) and mixins (similar to Java classes 
except that they're parametrized over their superclass and can be applied
multiple times) and separating the definitions of these components from 
their linking. This structure allows the programmer to use the 
encapsulation and linking of units to accordingly bundle up mixin 
extensions when needed.

Take home(s):
- Defining signatures separately from implementation gives us a better
  upportunity for extensibility, no matter what language we're using.
  
Discussion highlights:
- While the extensibility is built into their language (MzScheme), other
  languages like Java provide us the tools to allow for such extensibility
  however we need to apply some techniques like the visitor pattern in 
  order to achieve it.
- We can think of Haskell module system as a conventional module system and
  Java's classes without interfaces as conventional classes.
- By loosening the restrictions of conventional classes and modules we can
  solve the extensibility problem rather elegantly.
- Mixins are similar to ML functors.
- We can think of both lessons they're talking about in terms of Haskell's 
  type classes.
- If we add type signatures to units it could also work for statically typed
  languages.
