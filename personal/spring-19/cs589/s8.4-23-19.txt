Harper and Pierce, Design Considerations for an ML-Style Module System, 
from Advanced Topics in Types and Programming Languages, 2005 
Sections 8.1â€“8.4

Notes:
- module: parts of manageable size when breaking down a large prog.
- module (structure): a collection of components which may include procedure
  or function definitions, variable declarations, type definitions, and
  initialization code.
- methodology of modularity: how best to decompose progs into modules with
  a variety of desiarable engineering characteristics.
- abstract types arise by sealing a module with a signature that selectively
  suppresses the definitions of its type components. 
- root module: the main entry point of the prog.
- linker task: compose a complete prog by resolving external references,
  creating module bindings for each of the external references in the partial
  prog under construction until no unresolved references remain.
- signature (interface): describes the externally visible components of the 
  module that is some other module is depending on.
- a prog consists of bindings, each of which is either a module binding or a
  signature binding.
- module binding: binds the variable to a modue expression, perhaps with a 
  specified signature.
- basic signature: consists of a sequence of component declarations, either a 
  type decl or a value decl.
- prinicipal signature: the most precise signature implemented by a module.
- signature matching: the subtyping relation between the description of 
  modules (ie. their signature), denoted by I <: J. I is sub-signature of
  J only if any module implementing I also implements J, i.e., I is more 
  specific (states stronger requirements on an implementation) than J.
- two methods to signature matching: 1) structural: based on the 
  requirements imposed by the signature without requiring any declarations.
  2) nominal: based on the explicit declaration of subtyping relationships
  among signatures.
- structural matching is more felxible but nominal is simpler.
- few module langs have rinicpal signatures. reason: the lang of sig may be
  too weak to permit a precise description of the properties of a module.
- complete progs don't have free variables!
- distinguish bw module expression and module value! e.g: 
  module p = mod { 
    val f = ...
  } 
  is a module expr and not value. each time the expression mod ... is evaluated
  a new cell is allocated and a different module value results.
- most imp aspect of exe is linking.
- they model linking as a process of binding modules to module variables.
- separate compilation: the sig of free module vars are explicitly given by the 
  programmer
- incermental compilation: the compiler infers the sig of free module vars from the 
  source code of the referenced module
- cut-off compilation: if the source code of a module has changed but its sig hasn't
  then there's no need to recompile modules that depend on it, i.e., recompilation 
  may be cut off at that point.
- separate compilation affords maximal flexibility but it places a buden on the linker 
  to ensure that the binding of a module var implements the presumed sig.
- the impl of any externally module must be present in incremental compilation in order
  to compile the referring module. Hence, a module sys that lack principal sig cannot 
  properly support incremental compilation.
- linking context: the collection of module bindings
- the order of module bindings depends both on reference dependencies and 
  initialization dependencies.
- statically typed langs respect the phase distinction.
- first-class module expression: its type components aren't determined until run time.
- the distinction bw the first- and second- class module is a matter of eval bahavior.

--------------------------------------------------------------------
In-calss assignment:

Summary notes:
Summary:
The chapter so far discussed mechanism of supporting modular programming.
based on a typing system for modularity grounded in the framework of TAPL.
It introduces lots of terminologies such as module, root module, 
signature, external reference, external and internal name, basic signature,
principal signature, signature matching (and its two styles: structural 
and nominal), two methods
of compilation: separate and incremental, cut-off compilation, linker, 
linking context, resolving external references, reference dependencies, 
initialization dependencies, definite and indifinite external reference,
phase distinction, firts- and second-class modules.

Take home(s):
The overal take home of the chapter for me was the need to have
a type system for the modularity system of a language and that we can 
implement a modularity system for a language based on different factors, 
some features of the language dictate some features of the modularity 
system (eg.: whether we have first- or second-class modules depends on the
language being statically typed or what they define as dependent typed 
language), while for some other features of the modularity system we can
decide based on the criteria we're looking for the system (eg.: whether 
we choose separate compilation or incremental). And of course, there are
some features that are just shared among all modularity systems (eg.:the 
order of bindings of modules depends both on reference dependencies and 
initialization dependencies).

Questions/topics for discussion:
- What compilation system is GHC (separate or incremental)? (My thought: separate)
- "A module system that lacks prinicipal signatures cannot properly
  support incremental compilation." Is this because we can reduce the problem
  of checking whether a module implements a signature to checking the subtype 
  relation between the given signature and the module's principle signature and
  in incremental compilation the compiler consults the implementation of a 
  module to determine its signature and so if we cannot reduce the problem then
  it's undecidable?!!
- What's the relationship between statically typed languages, dynamically 
  typed languages and dependet typed languages with respecting or violating
  the phase distinction? (They're definition of dependent typed languages 
  seems to be different from my understanding!!)


Discussion notes:
Summary:

Take home(s):

Discussion highlights:
