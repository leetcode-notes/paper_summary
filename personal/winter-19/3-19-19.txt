Why functional programming matters
@https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf

Summary:
Well-structured software is easy to write and to debug, and provides
a collection of modules that can be reused to reduce future programming
costs. Tow features of FL: higher-order functions and lazy eval can 
contribute significantly to modularity. Since modularity is the key to 
successful programming, FP offers important adv for software dev.

GLUING FUNCS TOGETHER:
using higher-order functions we can reap benefits by reusing parts and
factoring out common patterns happening all over our functions.

GLUING PROGS TOGETHER:
(g . f): the two programs f and g are run together in strict sync. Prog f
is started only when g tries to read some input, and runs only for long 
enough to deliver the output g is trying to read. Then f is suspended and 
g is run until it tries to read another input. As an added bonus, if g 
terminates without reading all of f's output, then f is aborted. Prog f can
even be a nonterminating prog, producing an infinite amount of output, since 
it will be terminated forcibly as soon as g is finished. This allows 
termination conditions to be separated from loop bodies -- a powerful 
modularization. Since this method of evaluation runs f as little as possible,
it's called "lazy evaluation".

Our ability to decompose a problem into parts depends directly on our ability
to glue solutions together. This paper provides further evidence that lazy
eval is too imp to be relegated to second-class citizenship.

Notes:
- FP is so called b/c its fundamental op is the application of funcs. 
- functional programs contain no assignment statements, so variables 
  once given a vlaue never change. More generally, functional programs
  contain no side effects at all. This eliminates a major source bug and
  makes the order of execution irrelevant. This relieves the programmer
  of the burden of prescribing the flow of control. Since expressions 
  can be evaluated at any time, one can freely replace variables by their
  values and vice versa, i.e., programs are "referentially transparent".
- FP has NO assignment, no side effects, no flow of control. 
- a FPer is an order of magnitude more productive than their conventional 
  counterpart, b/c functional programs are an order of magnitude shorter. 
  buty why is that? conventional programs consist of 90% assignment statements.
- Structured programs are designed in a modular way. Modular design brings 
  with it great productivity improvements. 1) small modules can be coded
  quickly and easily. 2) general-purpose modules can be reused, leading to
  faster development of subsequent programs. 3) the modules of a program can 
  be tested independently, helping to reduce the time spent debugging. 
- To increase one's ability to modularize a problem, one must provide new 
  kinds of glue in the PL. 
- FPers must strive for smaller and simpler and more general modules, glued
  together with higher-order funcs and lazy eval (the two new glues FP provides).
- [For teaching] one way to understand (foldr f a) is as a function that replaces
  all occurrences of Cons in a list by f, and all occurrences of Nil by a. e.g.:
  [1,2,3] = Cons 1 $ Cons 2 $ Cons 3 Nil
  foldr  (+) 0 = (+) 1 $ (+) 2 $ (+) 3 0
- append :: [a] -> [a] -> [a]
  append a b = foldr Cons b a
- map f = foldr (Cons . f) Nil
- f (g h) = (f . g) h --> so when you have multiple applications s.t. f (g h)
  you can write it as f.g
- Whenever a new datatype is defined, higher-order funcs should be written for
  processing it. This makes manipulating the datatype easy, and it also localizes 
  knowledge about the details of tis representation.
- 

